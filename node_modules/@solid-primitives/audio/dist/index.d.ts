import { Accessor } from 'solid-js';

declare enum AudioState {
    LOADING = "loading",
    PLAYING = "playing",
    PAUSED = "paused",
    COMPLETE = "complete",
    STOPPED = "stopped",
    READY = "ready",
    ERROR = "error"
}
type AudioSource = string | undefined | HTMLAudioElement | MediaSource | (string & MediaSource);
type AudioEventHandlers = {
    [K in keyof HTMLMediaElementEventMap]?: (event: HTMLMediaElementEventMap[K]) => void;
};
/**
 * Generates a basic audio instance with limited functionality.
 *
 * @param src Audio file path or MediaSource to be played
 * @param handlers An array of handlers to bind against the player
 * @return A basic audio player instance
 */
declare const makeAudio: (src: AudioSource, handlers?: AudioEventHandlers) => HTMLAudioElement;
/**
 * Generates a basic audio player with simple control mechanisms.
 *
 * @param src Audio file path or MediaSource to be played
 * @return options - @type Object
 * @return options.start - Start playing
 * @return options.pause - Pause playing
 * @return options.seek - Seeks to a location in the playhead
 * @return options.setVolume - Sets the volume of the player
 * @return options.player - Raw player instance
 * @return Returns a location signal and one-off async query callback
 *
 * @example
 * ```ts
 * const { start, seek } = makeAudioPlayer('./example1.mp3);
 * ```
 */
declare const makeAudioPlayer: (src: AudioSource, handlers?: AudioEventHandlers) => {
    play: () => Promise<void>;
    pause: VoidFunction;
    seek: (time: number) => void;
    setVolume: (volume: number) => void;
    player: HTMLAudioElement;
};
/**
 * A reactive audio primitive with basic control actions.
 *
 * @param src Audio source path or MediaSource to be played or an accessor
 * @param playing A signal for controlling the player
 * @param volume A signal for controlling the volume
 * @return [store] - @type Store
 * @return [store.state] - Current state of the player
 * @return [store.currentTime] - Current time of the playhead
 * @return [store.duration] - Duration of the loaded file
 * @return [store.volume] - Current volume of the audio player
 * @return [store.player] - Raw player instance
 * @return [controls] - Controls for the audio player @type Object
 * @return [controls.seek] - Seeks to a specified location
 * @return [controls.play] - Start playing
 * @return [controls.pause] - Pause playing
 * @return [controls.setVolume] - Sets the volume of the player, from 0 to 1
 *
 *
 * @example
 * ```ts
 * const [playing, setPlaying] = createSignal(false);
 * const [volume, setVolume] = createSignal(1);
 * const [audio, controls] = createAudio('./example1.mp3', playing, volume);
 * console.log(audio.duration);
 * ```
 */
declare const createAudio: (src: AudioSource | Accessor<AudioSource>, playing?: Accessor<boolean>, volume?: Accessor<number>) => [{
    state: AudioState;
    currentTime: number;
    duration: number;
    volume: number;
    player: HTMLAudioElement;
}, {
    seek: (time: number) => void;
    setVolume: (volume: number) => void;
    play: () => Promise<void>;
    pause: VoidFunction;
}];

export { AudioEventHandlers, AudioSource, AudioState, createAudio, makeAudio, makeAudioPlayer };
